@using MyBlazorHosted.Libraries.Product.Models;
@using MyBlazorHosted.Libraries.ShoppingCart.Models;
@using MyBlazorHosted.Shared.Models;
@using System.Text.Json
@using System.Text
@inject NavigationManager navigationManager;
@inject HttpClient _HttpClient
@inject IConfiguration configuration

<div class="card col-3 m-2" style="width: 18rem;padding:0">
    <img src="/Images/@Product?.Image" style="width:100%" class="card-img-top" alt="...">
    <div class="card-body">
        <a href="@Product?.FullUrl">
            <h5 class="card-title">@Product?.Name</h5>
        </a>
        <p class="card-text">قیمت : @Product?.Price</p>
        <div>
            <input @bind="Quantity" type="number" placeholder="تعداد؟" class="form-control" />

            <button class="btn btn-outline-success mt-2" @onclick="AddToCart">
                @if (HasProductInCart)
                {
                    <span>
                        اضافه به سبد خرید
                        @if (Quantity.HasValue)
                        {
                            <text>@Quantity بیشترش کن</text>
                        }
                    </span>
                }
                else
                {
                    <span>
                        اولین خریدت رو انجام بده
                    </span>
                }
            </button>
        </div>
        <a href="#" class="btn btn-primary">نمایش جزیات</a>
    </div>
</div>
@code {

    [Parameter]
    public ProductModel? Product { get; set; }

    private bool HasProductInCart { get; set; }

    public int? Quantity { get; set; }

    [CascadingParameter(Name = "ShopingCartCountModel")]
    private ShopingCartCountModel? shopingCartCountModel { get; set; }

}

@functions
{
    protected override async Task OnParametersSetAsync()
    {
        if (Product != null)
        {
            HasProductInCart = await _HttpClient.GetFromJsonAsync<bool>(
                "/api/ShoppingCart/has-product/" + Product.Sku
                );
        }

        await base.OnParametersSetAsync();
    }

    public async Task AddToCart()
    {
        if (Product != null)
        {
            if (!HasProductInCart)
            {
                var request = new HttpRequestMessage(HttpMethod.Post, "/api/ShoppingCart");

                request.Headers.Add("Authorization", configuration.GetValue<string>("ApiKey"));

                request.Content = new StringContent(
                    JsonSerializer.Serialize(
                        new ShoppingCartAddModel
                        {
                             ProductSku = Product.Sku,
                             Quantity = Quantity ?? 1
                        }
                    ), Encoding.UTF8, "application/json"
                    );

                await _HttpClient.SendAsync(request);


            }
            else
            {
                var request = new HttpRequestMessage(HttpMethod.Put, "/api/ShoppingCart");

                request.Headers.Add("Authorization", configuration.GetValue<string>("ApiKey"));

                request.Content = new StringContent(
                    JsonSerializer.Serialize(
                        new ShoppingCartAddModel
                            {
                                ProductSku = Product.Sku,
                                Quantity = Quantity ?? 1
                            }
                    ), Encoding.UTF8, "application/json"
                );

                // await _HttpClient.PutAsJsonAsync("/api/ShoppingCart", new ShoppingCartAddModel()
                // {
                //         ProductSku = Product.Sku,
                //         Quantity = Quantity ?? 1
                // });
            }

            HasProductInCart = await _HttpClient.GetFromJsonAsync<bool>(
                "/api/ShoppingCart/has-product/" + Product.Sku
                );

            Quantity = null;

            if (shopingCartCountModel != null)
            {
                shopingCartCountModel.OnCountChange();
            }
        }
        navigationManager.NavigateTo("/cart");
    }
}
