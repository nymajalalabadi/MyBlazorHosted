@page "/product/{slug}"
@using MyBlazorHosted.Libraries.Product.Models;
@using MyBlazorHosted.Libraries.ShoppingCart.Models;
@using MyBlazorHosted.Shared.Models;
@using System.Text.Json
@using System.Text
@inject HttpClient _HttpClient
@inject NavigationManager navigationManager
@inject IConfiguration configuration

@if (Product != null)
{
    <PageTitle>@Product.Name</PageTitle>
    <HeadContent>
        <meta name="description" content="@Product.Name" />
    </HeadContent>
}

@if (Product == null)
{
    <div class="alert alert-warning">
        <h2>محصول مورد نظر پیدا نشد</h2>
    </div>
}
else
{
    <div class="row">
        <div class="col-3">
            <img src="/Images/@Product.Image" class="img-thumbnail" style="width:100%" />
        </div>
        <div class="col-9">
            <h2>@Product.Name</h2>
            <hr />
            <p class="text-success">قیمت : @Product.Price $</p>
            <div class="row m-3">
                @if (shopingCartCountModel?.Count > 0)
                {
                    <p>اقلام موجود در سبد خرید : @shopingCartCountModel?.Count می باشد</p>
                }

                <EditForm Model="productAddToCartModel" OnValidSubmit="AddToCart">
                <div class="col-4">
                    <DataAnnotationsValidator />
                    <ValidationMessage For="() => productAddToCartModel.Quantity" />
                    <InputNumber @bind-Value="productAddToCartModel.Quantity" class="form-control" placeholder="تعداد؟" />
                </div>
                    <div class="col-3">
                        <button class="btn btn-outline-primary">
                            @if (HasProductInCart)
                            {
                                <span>
                                    اضافه به سبد خرید
                                    @if (productAddToCartModel.Quantity.HasValue)
                                    {
                                        <text>@productAddToCartModel.Quantity بیشترش کن</text>
                                    }
                                </span>
                            }
                            else
                            {
                                <span>
                                    اولین خریدت رو انجام بده
                                </span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
            <ul>
                @foreach (var product in ListProduct)
                {
                    <li>
                        <a href="@product.FullUrl">
                            @product.Name
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>

}


@code {
    public ProductModel? Product { get; set; }

    public IList<ProductModel>? ListProduct { get; set; }

    [Parameter]
    public string? slug { get; set; }

    private bool HasProductInCart { get; set; }

    ProductAddToCartModel productAddToCartModel = new ProductAddToCartModel();

    [CascadingParameter(Name = "ShopingCartCountModel")]
    private ShopingCartCountModel? shopingCartCountModel { get; set; }

}

@functions 
{
    protected override async Task OnInitializedAsync()
    {
        ListProduct = await _HttpClient.GetFromJsonAsync<IList<ProductModel>>(
            "/api/Product"
        );

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(slug))
        {
            Product = await _HttpClient.GetFromJsonAsync<ProductModel>(
                "/api/Product/by-slug/" + slug
            );


            if (Product != null)
            {
                HasProductInCart = await _HttpClient.GetFromJsonAsync<bool>(
                    "/api/ShoppingCart/has-product/" + Product.Sku
                    );
            }
        }

        await base.OnParametersSetAsync();
    }

    public async Task AddToCart()
    {
        if (Product != null)
        {
            if (!HasProductInCart)
            {
                var request = new HttpRequestMessage(HttpMethod.Post, "/api/ShoppingCart");

                request.Headers.Add("Authorization", configuration.GetValue<string>("ApiKey"));

                request.Content = new StringContent(
                    JsonSerializer.Serialize(
                        new ShoppingCartAddModel
                            {
                                ProductSku = Product.Sku,
                                Quantity = productAddToCartModel.Quantity ?? 1
                            }
                    ), Encoding.UTF8, "application/json"
                    );

                await _HttpClient.SendAsync(request);

            }
            else
            {
                var request = new HttpRequestMessage(HttpMethod.Put, "/api/ShoppingCart");

                request.Headers.Add("Authorization", configuration.GetValue<string>("ApiKey"));

                request.Content = new StringContent(
                    JsonSerializer.Serialize(
                        new ShoppingCartAddModel
                            {
                                ProductSku = Product.Sku,
                                Quantity = productAddToCartModel.Quantity ?? 1
                            }
                    ), Encoding.UTF8, "application/json"
                    );

                await _HttpClient.SendAsync(request);
            }

            HasProductInCart = await _HttpClient.GetFromJsonAsync<bool>(
                "/api/ShoppingCart/has-product/" + Product.Sku
                );

            productAddToCartModel.Quantity = null;

            if (shopingCartCountModel != null)
            {
                shopingCartCountModel.OnCountChange();
            }
        }
        navigationManager.NavigateTo("/cart");
    }
}
